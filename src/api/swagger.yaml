# post\src\api\swagger.yaml

openapi: 3.0.3
info:
  title: Nihil Post Service API
  description: REST API for post management, part of the Nihil platform.
  version: "1.0.0"
servers:
  - url: http://localhost:3002/api
    description: Local dev server

tags:
  - name: Posts
    description: Post CRUD operations

paths:
  /posts:
    get:
      tags: [Posts]
      summary: Get all posts
      responses:
        "200":
          description: List of posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: success }
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/PostDTO" }
    post:
      tags: [Posts]
      summary: Create a post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostCreate"
      responses:
        "201":
          description: Post created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: success }
                  data: { $ref: "#/components/schemas/PostDTO" }
  /posts/{id}:
    get:
      tags: [Posts]
      summary: Get post by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Post found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: success }
                  data: { $ref: "#/components/schemas/PostDTO" }
        "404": { description: Not found }
    put:
      tags: [Posts]
      summary: Update post by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PostUpdate" }
      responses:
        "200":
          description: Post updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: success }
                  data: { $ref: "#/components/schemas/PostDTO" }
        "404": { description: Not found }
    delete:
      tags: [Posts]
      summary: Delete post by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Post deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: success }
                  data: { type: "null" }
        "404": { description: Not found }

components:
  schemas:
    PostDTO:
      type: object
      properties:
        id: { type: string, example: ccc-dfa4-44f3-8b0e-0c6b9ad9c2b1 }
        userId: { type: string }
        content: { type: string }
        mediaUrl: { type: string, nullable: true }
        originalPostId: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    PostCreate:
      type: object
      required: [userId, content]
      properties:
        userId: { type: string }
        content: { type: string }
        mediaUrl: { type: string, nullable: true }
        originalPostId: { type: string, nullable: true }
    PostUpdate:
      type: object
      properties:
        content: { type: string }
        mediaUrl: { type: string, nullable: true }
        originalPostId: { type: string, nullable: true }
